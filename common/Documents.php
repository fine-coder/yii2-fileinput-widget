<?php

namespace common\models;

use Yii;
use yii\helpers\ArrayHelper;
use yii\web\UploadedFile;

/**
 * This is the model class for table "documents".
 *
 * @property int $id
 * @property string $image
 * @property string $text
 */
class Documents extends \yii\db\ActiveRecord
{
    public $file;
    public $docFiles;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'documents';
    }

    /*
    public function behaviors()
    {
        return [];
    }
    */

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['text'], 'required'],
            [['image'], 'string', 'max' => 200],
            [['text'], 'string', 'max' => 800],
            [['file'], 'image', 'maxSize' => 10240000, 'checkExtensionByMimeType' => false, 'extensions' => 'png, jpg, jpeg', 'mimeTypes' => 'image/png, image/jpeg'],
            [['docFiles'], 'file', 'maxFiles' => 20, 'maxSize' => 102400000],

            /*
            ['file', 'image', 'skipOnEmpty' => false, 'when' => function ($model) {
                return $this->image == '';
            }, 'whenClient' => "function (attribute, value) {
                return $('.file-preview-image').length == 0;
            }"],
            */
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'file' => 'Свидетельство об аккредитации',
            'docFiles' => 'Файлы',
            'text' => 'Текст'
        ];
    }

    public function beforeValidate()
    {
        $this->file = UploadedFile::getInstance($this, 'file');
        $this->docFiles = UploadedFile::getInstances($this, 'docFiles');

        return parent::beforeValidate();
    }

    public function beforeSave($insert)
    {
        //Yii::$app->session->addFlash('success', 'Good');

        if ($file = UploadedFile::getInstance($this, 'file')) {
            $this->image = 'certificate.' . $file->extension;

            $path = Yii::getAlias('@uploads') . '/documents/' . $this->image;

            if ($file->saveAs($path)) {
                $size = getimagesize($path);

                if ($size[0] > 1920 or $size[1] > 1920) {
                    \yii\imagine\Image::resize($path, 1920, 1920)->save($path, ['quality' => 95]);
                }
            }
        }

        if ($this->image == '') {
            $this->image = 'no_image.jpg';
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function getFiles()
    {
        return $this->hasMany(DocumentManager::class, ['item_id' => 'id'])->orderBy('sort');
    }

    public function getFilesLink()
    {
        return ArrayHelper::getColumn($this->files, 'fileUrl');
    }

    public function getFilesLinkData()
    {
        return ArrayHelper::toArray($this->files, [
                DocumentManager::class => [
                    // Важно: 'caption' используют иконки, в нем будем хранить имя файла с расширением, по которому будет выводиться нужная иконка
                    // Поэтому заменим 'caption' => 'title' на 'caption' => 'name', а заголовки будем хранить в title (см. ниже в getThumbTags)
                    // Во вьюшке documents.php заменим у одного input атрибут value="{caption}" на value="{title}"
                    'caption' => 'name',
                    'key' => 'id',
                    //'type'=>'title'
                ]
            ]
        );
    }

    public function getThumbTags()
    {
        $arr = ArrayHelper::toArray($this->files, [
                DocumentManager::class => [
                    '{name}' => 'name',
                    '{title}' => 'title'
                ]
            ]
        );

        // Особенность сохранения заголовков изображений в виджете FileInput
        for ($i = 0; $i < count($arr); $i++) {
            $arr[$i]['{TAG_CSS_NEW}'] = 'kv-hidden';
            $arr[$i]['{TAG_CSS_INIT}'] = '';
        }

        return $arr;
    }
}
